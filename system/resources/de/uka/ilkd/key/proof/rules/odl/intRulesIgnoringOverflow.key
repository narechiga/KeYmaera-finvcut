// This file is part of KeY - Integrated Deductive Software Design 
// Copyright (C) 2001-2003 Universitaet Karlsruhe, Germany
//                         and Chalmers University of Technology, Sweden          
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//


\optionsDecl{
  initialisation:{disableStaticInitialisation, enableStaticInitialisation};
}

\sorts{
  int;
  numbers;
}

\schemaVariables{
  \modalOperator { diamond, box, throughout,
                              diamond_trc, box_trc, throughout_trc,
                              diamond_tra, box_tra, throughout_tra } #allmodal ;
  \modalOperator { diamond_tra, box_tra, throughout_tra} #traonly;


  // The assignment rules in this file actually *do need* special handling for transacrion abort case
  // so I removed the #traonly from the definition below
  \modalOperator { diamond, box, diamond_trc, box_trc, throughout_trc } #normalassign;
  \term int i,i0,i1,i2,i3,i4,j,j0,j1 ;
  \variables int k, nv ;
  \term numbers iz, jz ;
  \program Type #t ;
  \program SimpleExpression #se, #se0, #se1 ;
  \program NonSimpleExpression #nse, #nse0, #nse1, #nse2 ;
  \program Expression #e, #e0, #e1, #e2 ;
  \program Variable #a, #v, #v0, #v1 ;

  // use these variables if you move sth in an update
  // take care of static initialisation
  \program Variable #loc ;
  \program StaticVariable #sv ;   

  \program LeftHandSide #lhs, #lhs0, #lhs1 ;
  \formula b, post;
}


\functions{

}

\predicates{

}

// based on intRules:arithmeticSemanticsIgnoringOF
\rules(programRules:ODL, intRules:arithmeticSemanticsIgnoringOF) {

  //reviewed 04/19/2004, St.S.
  eliminate_variable_declaration_byte {\find (\modality{#allmodal}{.. byte #v0; ...}\endmodality(post))
	\replacewith (\modality{#allmodal}{..  ...}\endmodality(post))
	\addprogvars(#v0)	
	\heuristics(simplify_prog)
	\displayname "eliminate_variable_declaration"
  };


  //reviewed 04/19/2004, St.S.
  eliminate_variable_declaration_short {\find (\modality{#allmodal}{.. short #v0; ...}\endmodality(post))
	\replacewith (\modality{#allmodal}{..  ...}\endmodality(post))
	\addprogvars(#v0)	
	\heuristics(simplify_prog)
	\displayname "eliminate_variable_declaration"
  };

  //reviewed 04/19/2004, St.S.
  eliminate_variable_declaration_char {\find (\modality{#allmodal}{.. char #v0; ...}\endmodality(post))
	\replacewith (\modality{#allmodal}{..  ...}\endmodality(post))
	\addprogvars(#v0)	
	\heuristics(simplify_prog)
	\displayname "eliminate_variable_declaration"
  };

  //reviewed 04/19/2004, St.S.
  eliminate_variable_declaration_int {\find (\modality{#allmodal}{.. int #v0; ...}\endmodality(post))
	\replacewith (\modality{#allmodal}{..  ...}\endmodality(post))
	\addprogvars(#v0)	
	\heuristics(simplify_prog)
	\displayname "eliminate_variable_declaration"
  };

  //reviewed 04/19/2004, St.S.
  eliminate_variable_declaration_long {\find (\modality{#allmodal}{.. long #v0; ...}\endmodality(post))
	\replacewith (\modality{#allmodal}{..  ...}\endmodality(post))
	\addprogvars(#v0)	
	\heuristics(simplify_prog)
	\displayname "eliminate_variable_declaration"
  };




//------------------------------------------------------------------------
// ----------- Rules for unary arithmetic operators  applied to a non-simple expression
//------------------------------------------------------------------------


  //reviewed 04/15/2004, St.S.
   compound_unary_plus_assignment { \find (\modality{#allmodal}{..#lhs=+#e;...}\endmodality(post)) 
        \replacewith (\modality{#allmodal}{..#lhs=#e;...}\endmodality(post)) \heuristics (simplify_int)};

  //reviewed 04/15/2004, St.S.
   compound_unary_minus_eval { \find (\modality{#allmodal}{..#lhs=-#nse;...}\endmodality(post)) 
	 \varcond(\new(#v0, \typeof(#nse)))
         \replacewith (\modality{#allmodal}{.. #typeof(#nse) #v0 = #nse;
				    #lhs = -#v0;
                               ...}\endmodality(post)) \heuristics (simplify_int)};


//------------------------------------------------------------------------
// ----------- Rules for cast ---------------------------------------------
//------------------------------------------------------------------------

// since we ignore range of types we ignore casts

  //reviewed 04/15/2004, St.S.
   cast_1 { \find (\modality{#allmodal}{.. #lhs = (byte) #se; ...}\endmodality(post))
            \replacewith (\modality{#allmodal}{.. #lhs = #se;  ...}\endmodality(post)) 
            \heuristics (simplify_int)
            \displayname "cast"};

  //reviewed 04/15/2004, St.S.
   cast_2 { \find (\modality{#allmodal}{.. #lhs = (char) #se; ...}\endmodality(post))
            \replacewith (\modality{#allmodal}{.. #lhs = #se;  ...}\endmodality(post)) 
            \heuristics (simplify_int)
            \displayname "cast"};

  //reviewed 04/15/2004, St.S.
   cast_3 { \find (\modality{#allmodal}{.. #lhs = (short) #se; ...}\endmodality(post))
            \replacewith (\modality{#allmodal}{.. #lhs = #se;  ...}\endmodality(post)) 
            \heuristics (simplify_int)
            \displayname "cast"};

  //reviewed 04/15/2004, St.S.
   cast_4 { \find (\modality{#allmodal}{.. #lhs = (int) #se; ...}\endmodality(post))
            \replacewith (\modality{#allmodal}{.. #lhs = #se;  ...}\endmodality(post)) 
            \heuristics (simplify_int)
            \displayname "cast"};

  //reviewed 04/15/2004, St.S.
   cast_5 { \find (\modality{#allmodal}{.. #lhs = (long) #se; ...}\endmodality(post))
            \replacewith (\modality{#allmodal}{.. #lhs = #se;  ...}\endmodality(post)) 
            \heuristics (simplify_int)
            \displayname "cast"};

}

//==================================================================================
//============ state changing rules not triggering static initialisation ===========
//==================================================================================
\rules(programRules:ODL) {

//------------------------------------------------------------------------
// ----------- Rules for unary arithmetic operators  applied to a non-simple expression
//------------------------------------------------------------------------
 //reviewed 04/15/2004, St.S.  
   compound_unary_minus_assignment { \find (\modality{#normalassign}{..#loc=-#se;...}\endmodality(post)) 
         \replacewith ({#loc:=neg(#se)}\modality{#normalassign}{.. ...}\endmodality(post)) \heuristics (simplify_int)};

 //modified/reviewed, 05/13/2004, W.M.
   compound_unary_minus_assignment_tra { \find (\modality{#traonly}{..#loc=-#se;...}\endmodality(post)) 
         \replacewith ({#shadowed(#loc):=neg(#se)}\modality{#traonly}{.. ...}\endmodality(post)) \heuristics (simplify_int)};

 //reviewed 04/15/2004, St.S.  
   compound_unary_minus_assignment_tout { \find (\throughout{..#loc=-#se;...}\endmodality(post)) 
         \replacewith (post & {#loc:=neg(#se)}\throughout{.. ...}\endmodality(post)) \heuristics (simplify_int)};


//------------------------------------------------------------------------
// ----------- Rules for binary arithmetic operators 
//------------------------------------------------------------------------

  //------------- multiplication

 //reviewed 04/15/2004, St.S.  
   assignment_multiplication  { 
	\find (\modality{#normalassign}{.. #loc=#se0 * #se1; ...}\endmodality(post)) 
	\replacewith ({#loc:=mul(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post))
	\heuristics(simplify_int)};

 //added 05/13/2004, W.M.
   assignment_multiplication_tra  { 
	\find (\modality{#traonly}{.. #loc=#se0 * #se1; ...}\endmodality(post)) 
	\replacewith ({#shadowed(#loc):=mul(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post))
	\heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
   assignment_multiplication_tout  { 
	\find (\throughout{.. #loc=#se0 * #se1; ...}\endmodality(post)) 
	\replacewith (post & {#loc:=mul(#se0,#se1)}\throughout{.. ... }\endmodality(post))
	\heuristics(simplify_int)};


  //------------- division

 //reviewed 04/15/2004, St.S.  
  assignment_division  { 
        \find (\modality{#normalassign}{.. #loc=#se0 / #se1; ...}\endmodality(post)) 
        \replacewith ((!#se1=0 -> {#loc:=div(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post)) &
                     ( #se1=0 -> \modality{#normalassign}{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
	\heuristics(simplify_int)};

 //added 05/13/2004, W.M.
  assignment_division_tra  { 
        \find (\modality{#traonly}{.. #loc=#se0 / #se1; ...}\endmodality(post)) 
        \replacewith ((!#se1=0 -> {#shadowed(#loc):=div(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post)) &
                     ( #se1=0 -> \modality{#traonly}{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
	\heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
  assignment_division_tout  { 
        \find (\throughout{.. #loc=#se0 / #se1; ...}\endmodality(post)) 
	\replacewith( (!#se1=0 -> post & {#loc:=div(#se0,#se1)}\throughout{.. ... }\endmodality(post))&
                     ( #se1=0 -> \throughout{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)) )
	\heuristics(simplify_int)};

  //------------- modulo

 //reviewed 04/15/2004, St.S.  
   assignment_modulo  { 
        \find (\modality{#normalassign}{.. #loc=#se0 % #se1; ...}\endmodality(post)) 
        \replacewith ((!#se1=0 -> {#loc:=mod(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post)) &
                     ( #se1=0 -> \modality{#normalassign}{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
        \heuristics(simplify_int)};

 //added 05/13/2004, W.M.
   assignment_modulo_tra  { 
        \find (\modality{#traonly}{.. #loc=#se0 % #se1; ...}\endmodality(post)) 
        \replacewith ((!#se1=0 -> {#shadowed(#loc):=mod(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post)) &
                     ( #se1=0 -> \modality{#traonly}{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
        \heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
   assignment_modulo_tout  { 
        \find (\throughout{.. #loc=#se0 % #se1; ...}\endmodality(post)) 
        \replacewith ((!#se1=0 -> post & {#loc:=mod(#se0,#se1)}\throughout{.. ... }\endmodality(post)) &
                      (#se1=0 -> \throughout{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
        \heuristics(simplify_int)};

  //------------- subtraction

 //reviewed 04/15/2004, St.S.  
   assignment_subtraction  { 
        \find (\modality{#normalassign}{.. #loc=#se0 - #se1; ...}\endmodality(post)) 
        \replacewith ({#loc:=sub(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post)) 
        \heuristics(simplify_int)};

 //added 05/13/2004, W.M.
   assignment_subtraction_tra  { 
        \find (\modality{#traonly}{.. #loc=#se0 - #se1; ...}\endmodality(post)) 
        \replacewith ({#shadowed(#loc):=sub(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post)) 
        \heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
   assignment_subtraction_tout  { 
        \find (\throughout{.. #loc=#se0 - #se1; ...}\endmodality(post)) 
        \replacewith (post & {#loc:=sub(#se0,#se1)}\throughout{.. ... }\endmodality(post)) 
        \heuristics(simplify_int)};

  //------------- addition

 //reviewed 04/15/2004, St.S.  
  assignment_addition  { 
          \find (\modality{#normalassign}{.. #loc=#se0 + #se1; ...}\endmodality(post)) 
          \replacewith ({#loc:=add(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post)) 
          \heuristics(simplify_int)};

 //added 05/13/2004, W.M.
  assignment_addition_tra  { 
          \find (\modality{#traonly}{.. #loc=#se0 + #se1; ...}\endmodality(post)) 
          \replacewith ({#shadowed(#loc):=add(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post)) 
          \heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
  assignment_addition_tout  { 
          \find (\throughout{.. #loc=#se0 + #se1; ...}\endmodality(post)) 
          \replacewith (post & {#loc:=add(#se0,#se1)}\throughout{.. ... }\endmodality(post)) 
          \heuristics(simplify_int)};
}


// based on initialisation:disableStaticInitialisation
\rules (programRules:ODL) {
//------------------------------------------------------------------------
//------- Rules for unary arithmetic operators 
//------------------------------------------------------------------------

 //reviewed 04/15/2004, St.S.  
   compound_unary_minus_passive_write_access { 
	\find (\modality{#normalassign}{..#sv=-#se;...}\endmodality(post)) 
        \replacewith ({#sv:=neg(#se)}
			\modality{#normalassign}{.. ...}\endmodality(post)) 
	\heuristics (simplify_int)};

 //added 05/13/2004, W.M.
   compound_unary_minus_passive_write_access_tra { 
	\find (\modality{#traonly}{..#sv=-#se;...}\endmodality(post)) 
        \replacewith ({#shadowed(#sv):=neg(#se)}
			\modality{#traonly}{.. ...}\endmodality(post)) 
	\heuristics (simplify_int)};

 //reviewed 04/15/2004, St.S.  
   compound_unary_minus_passive_write_access_tout { \find (\throughout{..#sv=-#se;...}\endmodality(post)) 
         \replacewith (post & {#sv:=neg(#se)}\throughout{.. ...}\endmodality(post)) \heuristics (simplify_int)};

//------------------------------------------------------------------------
// ----------- Rules for binary arithmetic operators 
//------------------------------------------------------------------------

  //------------- multiplication

 //reviewed 04/15/2004, St.S.  
   assignment_multiplication_passive  { 
	\find (\modality{#normalassign}{.. #sv=#se0 * #se1; ...}\endmodality(post)) 
	\replacewith ({#sv:=mul(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post))
	\heuristics(simplify_int)};

 //added 05/13/2004, W.M.
   assignment_multiplication_passive_tra  { 
	\find (\modality{#traonly}{.. #sv=#se0 * #se1; ...}\endmodality(post)) 
	\replacewith ({#shadowed(#sv):=mul(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post))
	\heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
   assignment_multiplication_tout_passive  { 
	\find (\throughout{.. #sv=#se0 * #se1; ...}\endmodality(post)) 
	\replacewith (post & {#sv:=mul(#se0,#se1)}\throughout{.. ... }\endmodality(post))
	\heuristics(simplify_int)};


  //------------- division

 //reviewed 04/15/2004, St.S.  
  assignment_division_passive  { 
        \find (\modality{#normalassign}{.. #sv=#se0 / #se1; ...}\endmodality(post)) 
        \replacewith ( (!#se1=0 -> {#sv:=div(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post)) &
                      ( #se1=0 -> \modality{#normalassign}{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
	\heuristics(simplify_int)};

 //added 05/13/2004, W.M.
  assignment_division_passive_tra  { 
        \find (\modality{#traonly}{.. #sv=#se0 / #se1; ...}\endmodality(post)) 
        \replacewith ( (!#se1=0 -> {#shadowed(#sv):=div(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post)) &
                      ( #se1=0 -> \modality{#traonly}{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
	\heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
  assignment_division_tout_passive  { 
        \find (\throughout{.. #sv=#se0 / #se1; ...}\endmodality(post)) 
	\replacewith ( (!#se1=0 -> post & {#sv:=div(#se0,#se1)}\throughout{.. ... }\endmodality(post)) &
                     (  #se1=0 -> \throughout{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
	\heuristics(simplify_int)};

  //------------- modulo

 //reviewed 04/15/2004, St.S.  
   assignment_modulo_passive  { 
        \find (\modality{#normalassign}{.. #sv=#se0 % #se1; ...}\endmodality(post)) 
        \replacewith ((!#se1=0 -> {#sv:=mod(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post)) &
                     ( #se1=0 -> \modality{#normalassign}{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
        \heuristics(simplify_int)};

 //added 05/13/2004, W.M.
   assignment_modulo_passive_tra  { 
        \find (\modality{#traonly}{.. #sv=#se0 % #se1; ...}\endmodality(post)) 
        \replacewith ((!#se1=0 -> {#shadowed(#sv):=mod(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post)) &
                     ( #se1=0 -> \modality{#traonly}{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
        \heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
   assignment_modulo_tout_passive  { 
        \find (\throughout{.. #sv=#se0 % #se1; ...}\endmodality(post)) 
        \replacewith (( !#se1=0 -> post & {#sv:=mod(#se0,#se1)}\throughout{.. ... }\endmodality(post)) &
                      ( #se1=0 -> \throughout{.. throw new java.lang.ArithmeticException(); ... }\endmodality(post)))
        \heuristics(simplify_int)};

  //------------- subtraction

 //reviewed 04/15/2004, St.S.  
   assignment_subtraction_passive  { 
        \find (\modality{#normalassign}{.. #sv=#se0 - #se1; ...}\endmodality(post)) 
        \replacewith ({#sv:=sub(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post)) 
        \heuristics(simplify_int)};

 //added 05/13/2004, W.M.
   assignment_subtraction_passive_tra  { 
        \find (\modality{#traonly}{.. #sv=#se0 - #se1; ...}\endmodality(post)) 
        \replacewith ({#shadowed(#sv):=sub(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post)) 
        \heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
   assignment_subtraction_tout_passive  { 
        \find (\throughout{.. #sv=#se0 - #se1; ...}\endmodality(post)) 
        \replacewith (post & {#sv:=sub(#se0,#se1)}\throughout{.. ... }\endmodality(post)) 
        \heuristics(simplify_int)};

  //------------- addition

 //reviewed 04/15/2004, St.S.  
  assignment_addition_passive  { 
          \find (\modality{#normalassign}{.. #sv=#se0 + #se1; ...}\endmodality(post)) 
          \replacewith ({#sv:=add(#se0,#se1)}\modality{#normalassign}{.. ... }\endmodality(post)) 
          \heuristics(simplify_int)};

 //added 05/13/2004, W.M.
  assignment_addition_passive_tra  { 
          \find (\modality{#traonly}{.. #sv=#se0 + #se1; ...}\endmodality(post)) 
          \replacewith ({#shadowed(#sv):=add(#se0,#se1)}\modality{#traonly}{.. ... }\endmodality(post)) 
          \heuristics(simplify_int)};

 //reviewed 04/15/2004, St.S.  
  assignment_addition_tout_passive  { 
          \find (\throughout{.. #sv=#se0 + #se1; ...}\endmodality(post)) 
          \replacewith (post & {#sv:=add(#se0,#se1)}\throughout{.. ... }\endmodality(post)) 
          \heuristics(simplify_int)};
}
