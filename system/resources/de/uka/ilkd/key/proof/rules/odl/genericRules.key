// This file is part of KeY - Integrated Deductive Software Design 
// Copyright (C) 2001-2003 Universitaet Karlsruhe, Germany
//                         and Chalmers University of Technology, Sweden          
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules that are applicable for every sort (as they
// use \generic sorts).
// The format is the same as for problem files.

// quantifiers


\sorts {
  \generic G, S1, S2;
}

// These schema variables are used to write the following rules.
// They will not be visible in later runs of the parser, so you are
// fairly free in choosing their names.
\schemaVariables {
  \term G e,s,t, e0, alt1, alt2 ;
  \skolemTerm G sk ;
  \formula b,c;
  \variables G u, e2 ;
  \term SetOfG s0, s1 ;
  \variables SetOfG svar0 ;

  \program MethodReference #mr ;
  \program Variable #v, #att ;
  \program SimpleExpression #se, #se1, #se2 ;
  \term[rigid] G sr, tr ;
  \term G ref1, ref2 ;
  \term ind1, ind2 : S1 ;
  \term else, then : S2 ; 
}



\rules(programRules:ODL) {

  // Gamma rules
  all_left { \find (\forall u; b ==>) \add ({\subst u; t}(b) ==>) \heuristics(gamma) };
  ex_right { \find (==> \exists u; b) \add (==> {\subst u; t}(b)) \heuristics(gamma) };
///  all_left_delete { \find (all u.b ==>) \replacewith ({u t waryEx}(b) ==>)
///                       \heuristics(gamma_destructive) };
///  ex_right_delete { \find (==> ex u.b) \replacewith (==> {u t waryAll}(b))
///                       \heuristics(gamma_destructive) };
  inst_all { \assumes (\forall u; b ==>) \find (t) \add ({\subst u; t}(b) ==>) };
  inst_ex  { \assumes (==> \exists u; b) \find (t) \add (==> {\subst u; t}(b)) };
  
  // delta rules
  all_right { \find (==> \forall u; b) \varcond ( \new(sk, \dependingOn(b)) )
		\replacewith (==> {\subst u; sk}b) \heuristics (delta) };
  ex_left { \find (\exists u; b ==>) \varcond ( \new(sk, \dependingOn(b)) )
		\replacewith ({\subst u; sk}b ==>) \heuristics (delta) };
  
  // simplification
  all_unused { \find (\forall u; b) \varcond (\notFreeIn(u, b)) 
		 \replacewith (b)
		 \heuristics (simplify) };
  ex_unused  { \find (\exists u; b) \varcond (\notFreeIn(u, b))
		 \replacewith (b)
		 \heuristics (simplify) };
///  all_and_switch { \find (all u.(b & c))
///		     \replacewith ((all u.b) & (all u.c))
///		     \heuristics (split) };
///  ex_or_switch   { \find (ex u.(b | c))
///		     \replacewith ((ex u.b) | (ex u.c))
///		     \heuristics (split) };
  
  // equality
  close_eq { \find (s = s) \replacewith (true) \heuristics (concrete) };


  commute_eq { \find (s = t)
               \replacewith (t = s)
               \heuristics ( order_terms ) };
  make_insert_eq { \find (sr = tr ==>)
		     \addrules ( insert_eq { \find (sr) \replacewith (tr) } )
		     \heuristics (simplify) \noninteractive  };
  make_insert_eq_nonrigid { \find (s = t ==>)
		     \addrules ( insert_eq_nonrigid { \find (s) \\sameUpdateLevel
                                                     \replacewith (t)
                                                     \displayname "insert_eq" } )
		     \heuristics (simplify) \noninteractive  };
  insert_eq_all  { \find (sr = tr ==>)
		     \replacewith (==>)
		     \addrules ( auto_insert_eq { \find (sr) 
						 \replacewith (tr)
						 \heuristics (simplify) } ) };


///////////////////////////////////////////////////////////////////////////////

  apply_eq { \assumes ( s = t ==> ) \find ( s ) \\sameUpdateLevel
                              \replacewith ( t )
             \heuristics ( apply_equations ) };

  apply_eq_rigid { \assumes ( sr = tr ==> ) \find ( sr ) 
                                      \replacewith ( tr )
             \heuristics ( apply_equations )
             \displayname "apply_eq" };

///////////////////////////////////////////////////////////////////////////////


//  rewrite { \find (s) \sameUpdateLevel
//            \replacewith(t) \add (s = t ==>);
//            \add (==> s = t) } ;

//--------------- queries ----------------------------------------------------//

///  query_cut_1 { \find (==> s=#mr) varcond(typeof(#mr) #v new) 
///	\replacewith (==> s=t); 
///	\add (==> \<{#typeof(#mr) #v=#mr; }\>#v=t)  
///        \displayname "query cut" };
///
///  query_cut_2 { \find (==> #mr=s) varcond(typeof(#mr) #v new) 
///	\replacewith (==> t=s); 
///	\add (==> \<{#typeof(#mr) #v=#mr; }\>#v=t)  
///        \displayname "query cut" };
///
///  query_1 { \find (==> #mr=s) varcond(typeof(#mr) #v new)
///          \add (==> \<{#typeof(#mr) #v=#mr; }\>#v=s)  
///          \displayname "query" };
///
///  query_2 { \find (==> s=#mr) varcond(typeof(#mr) #v new)
///          \add (==> \<{#typeof(#mr) #v=#mr; }\>#v=s)
///          \displayname "query" };
///
///  query_3 { \find (#mr=s ==>) varcond(typeof(#mr) #v new)
///          \add ( ==> \<{#typeof(#mr) #v=#mr; }\>!#v=s)  
///          \displayname "query" };
///
///  query_4 { \find (s=#mr) varcond(typeof(#mr) #v new)
///          \add ( ==> \<{#typeof(#mr) #v=#mr; }\>!#v=s )
///          \displayname "query" };



/////----------Set Rules---------------
///  set_excludes { \find (SetOfG::excludes(s0,e))
///                 \replacewith (!(SetOfG::includes(s0,e)))
///                 \heuristics(simplify_sets)};
///  set_isEmpty  { \find (SetOfG::isEmpty(s0)) varcond (e2 not free in s0)
///                 \replacewith (all e2. ! SetOfG::includes(s0,e2)) };
///  set_notEmpty { \find (SetOfG::notEmpty(s0)) varcond (e2 not free in s0) 
///                 \replacewith (ex e2. SetOfG::includes(s0,e2))};
///  set_notEmpty_to_isEmpty { \find (SetOfG::notEmpty(s0))
///                            \replacewith (!SetOfG::isEmpty(s0))
///                            \heuristics(simplify_sets) };
///
///  set_emptySet { \find ( SetOfG::includes ( SetOfG::emptySet, e ) )
///                 \replacewith ( false )
///                 \heuristics(simplify_sets) };
///  set_emptySet_size { \find ( SetOfG::size ( SetOfG::emptySet ) )
///                      \replacewith ( Z(0(#)) )
///                      \heuristics(simplify_sets) };
///  set_zero_size { \find ( SetOfG::size ( s0 ) = Z(0(#)) ==> )
///                  \add ( SetOfG::isEmpty ( s0 ) ==> )
///                  \heuristics(simplify_sets) };
///  set_unique_empty { \find ( SetOfG::isEmpty ( s0 ) ==> )
///                     \add ( s0 = SetOfG::emptySet ==> )
///                     \heuristics(simplify_sets) };
///  set_unique_empty2 { \find ( ==> SetOfG::isEmpty ( s0 ) )
///                      \add ( ==> s0 = SetOfG::emptySet )
///                      \heuristics(simplify_sets)
///                      \displayname "set_unique_empty" };
///  set_size_nonEmpty { \find ( ==> SetOfG::isEmpty ( s0 ) )
///                      \add ( gt ( SetOfG::size ( s0 ), Z(0(#)) ) ==> )
///                      \heuristics(simplify_sets) };
///  set_including_nonEmpty { \find ( SetOfG::includes ( s0, e ) ==> )
///                           \add ( ==> SetOfG::isEmpty ( s0 ) )
///                           \heuristics(simplify_sets) };
///
///  set_union{ \find (SetOfG::includes(SetOfG::union(s0,s1),e))
///             \replacewith (SetOfG::includes(s0,e) | SetOfG::includes(s1,e))
///             \heuristics(simplify_sets) };
///  set_intersection { \find (SetOfG::includes(SetOfG::intersection(s0,s1),e))
///                     \replacewith (SetOfG::includes(s0,e) &
///                                  SetOfG::includes(s1,e))
///                     \heuristics(simplify_sets) };
///  set_without { \find (SetOfG::includes(SetOfG::without(s0,s1),e))
///                \replacewith (SetOfG::includes(s0,e) 
///				& ! SetOfG::includes(s1,e))
///                \heuristics(simplify_sets) };
///  set_symmetricDifference { \find (SetOfG::includes(
///				SetOfG::symmetricDifference(s0,s1), e))
///                            \replacewith (SetOfG::includes(s0,e) 
///					<-> ! SetOfG::includes(s1,e))
///                            \heuristics(simplify_sets) };
///  set_eq       { \find (s0 = s1) varcond (e2 not free in s0, e2 not free in s1)
///                 \replacewith (all e2.(SetOfG::includes(s0,e2) 
///				<-> SetOfG::includes(s1,e2))) };
///
///  set_including_pos { \assumes (SetOfG::includes(s0,e0) ==>) 
///		      \find (SetOfG::including(s0,e0)) \sameUpdateLevel
///                      \replacewith (s0)
///                      \heuristics(simplify_sets) }; 
///  set_including_neg { \assumes (==> SetOfG::includes(s0,e0)) 
///		      \find (SetOfG::size(SetOfG::including(s0,e0))) \sameUpdateLevel
///                      \replacewith (succ(SetOfG::size(s0)))
///                      \heuristics(simplify_sets)  }; 
///  set_excluding_neg { \assumes (==> SetOfG::includes(s0,e0)) 
///		      \find (SetOfG::excluding(s0,e0)) \sameUpdateLevel
///                      \replacewith (s0)
///                      \heuristics(simplify_sets)  }; 
///  set_excluding_pos { \assumes (SetOfG::includes(s0,e0) ==>) 
///		      \find (SetOfG::size(SetOfG::excluding(s0,e0))) \sameUpdateLevel
///                      \replacewith (pred(SetOfG::size(s0)))
///                      \heuristics(simplify_sets) }; 
///
///  set_including { \find (SetOfG::includes(SetOfG::including(s0,e0),e)) 
///                  \replacewith ((e0 = e) | SetOfG::includes(s0,e))
///                  \heuristics(simplify_sets) }; 
///  set_excluding { \find (SetOfG::includes(SetOfG::excluding(s0,e0),e))
///                  \replacewith (!(e0 = e) & SetOfG::includes(s0,e))
///                  \heuristics(simplify_sets) };
///
///  set_finite_induction { varcond ( e2 not free in b )
///                         "Base Case": \add ( ==> {svar0 SetOfG::emptySet}(b) );
///                         "Step Case": \add ( ==> all svar0 . ( b ->
///                                                all e2. {svar0 SetOfG::including(svar0,e2)}b ) );
///                         "Use Case":  \add ( all svar0. b ==>) };


// ------------- handling conditional terms ----------------------

///  commute_cond_term { \find ((s ?= t) then : else) varcond ( s smaller than t )
///                      \replacewith ((t ?= s) then : else)
///		      \heuristics (order_terms) };

///  simplify_unequal_cond_term { \assumes ( ==> s=t )
///                               \find ((s ?= t) then : else) \sameUpdateLevel
///                               \replacewith (else)
///		               \heuristics (apply_equations)
///		               \displayname "simplify_cond_term" };

  split_cond_term { \find ((s ?= t) then : else ) \sameUpdateLevel
                   \replacewith (then) \add ( s=t ==>);
                   \replacewith (else) \add ( !(s=t) ==>)
		   \heuristics (split_cond)
		   \displayname "split_cond_term"};

  simplify_cond_term { \find ((s ?= s) then : else ) 
                   \replacewith (then)
		   \heuristics (simplify)
		   \displayname "simplify_cond_term"};

///  simplify_conj_cond { \find ( (ref1, ind1 : else ?= ref1, ind1 : then) ) 
///			\replacewith(then) 
///		        \heuristics (simplify)
///			\displayname "simplify_cond"
///  };


///  split_conj_cond { \find ( (ref1, ind1 : else ?= ref2, ind2 : then) ) \sameUpdateLevel
///                    \replacewith(then) \add (ref1=ref2, ind1 = ind2 ==>);
///	            \replacewith(else) \add (==> ind1=ind2 & ref1=ref2)
///		    \heuristics (split_cond)
///	            \displayname "split_cond_term"
///  };

///  same_cond_branches { \find ((s ?= t) then : then) 
///                       \replacewith(then)
///		       \heuristics (simplify)
///	               \displayname "same_branches"
///  };

}
