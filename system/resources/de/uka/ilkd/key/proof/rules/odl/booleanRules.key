// This file is part of KeY - Integrated Deductive Software Design 
// Copyright (C) 2001-2003 Universitaet Karlsruhe, Germany
//                         and Chalmers University of Technology, Sweden          
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
\sorts{
 boolean;
}

\schemaVariables{
  \term boolean bo ;
  \term boolean b1, b2 ;
  \formula c;
  \variables boolean x ;
}

\functions{
	boolean TRUE;
	boolean FALSE;
}

\predicates{		
}

\heuristicsDecl {
  simplify_boolean;
  boolean_cases;
  alpha;
  concrete;
}


\rules {
	boolean_equal { \find (bo = bo) \replacewith(true) \heuristics(simplify_boolean, concrete)};
	boolean_not_equal_1 { \find (TRUE = FALSE) \replacewith(false) 
                              \heuristics(simplify_boolean, concrete)
                              \displayname "boolean_not_equal"
                            };
	boolean_not_equal_2 { \find (FALSE = TRUE) \replacewith(false) 
                              \heuristics(simplify_boolean, concrete)
                              \displayname "boolean_not_equal"
                            };	


	true_to_not_false {\find (bo=TRUE) \replacewith(!bo=FALSE)};

 //anything to ...=TRUE:

        false_to_not_true {
		\find (bo = FALSE) 
		\replacewith(!bo=TRUE)
		\heuristics(simplify_boolean)};       

	boolean_true_commute { 
           \find (TRUE = bo) \replacewith (bo = TRUE) 
           \heuristics(simplify_boolean)
           \displayname "boolean commute"};

	boolean_false_commute { 
           \find (FALSE = bo) \replacewith (bo = FALSE) 
           \heuristics(simplify_boolean)
           \displayname "boolean commute"};


	ex_bool {\find (\exists x; c) 
           \replacewith({\subst x; FALSE}c | {\subst x; TRUE}c)
           \heuristics(boolean_cases) };

	all_bool {\find (\forall x; c) 
           \replacewith({\subst x; FALSE}c & {\subst x; TRUE}c)
           \heuristics(boolean_cases) };

}
