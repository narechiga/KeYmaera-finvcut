\sorts {
   \generic GenAnySV \oneof { OclInteger, OclAny, OclBoolean, OclType, OclReal, OclClassifier, OclString };
   \generic GenCollectionSV \oneof { OclInteger, OclAny, OclBoolean, OclType, OclReal, OclClassifier, OclString,
			     OclCollectionOfOclAny, 
			     OclCollectionOfOclType, 
			     OclCollectionOfOclBoolean, 
			     OclCollectionOfOclReal, 
			     OclCollectionOfOclInteger, 
			     OclCollectionOfOclString, 
			     OclCollectionOfOclClassifier, 
			     OclSetOfOclAny, 
			     OclSetOfOclType, 
			     OclSetOfOclBoolean, 
			     OclSetOfOclReal, 
			     OclSetOfOclInteger, 
			     OclSetOfOclString, 
			     OclSetOfOclClassifier,
			     OclBagOfOclAny, 
			     OclBagOfOclType, 
			     OclBagOfOclBoolean, 
			     OclBagOfOclReal, 
			     OclBagOfOclInteger, 
			     OclBagOfOclString, 
			     OclBagOfOclClassifier,
			     OclSequenceOfOclAny, 
			     OclSequenceOfOclType, 
			     OclSequenceOfOclBoolean, 
			     OclSequenceOfOclReal, 
			     OclSequenceOfOclInteger, 
			     OclSequenceOfOclString, 
			     OclSequenceOfOclClassifier };
}

\schemaVariables {
   \variables GenAnySV x ;
   \variables GenCollectionSV acc ;
   \variables OclBoolean b ;
   \variables OclType t ;
   \variables OclClassifier c ;
   \term OclGeneric g1, g2 ;
   \term OclAny e1, e2, init, expr ;
   \term OclType t1, t2 ;
   \term OclBoolean b1, b2 ;   
   \term OclCollectionOfOclAny coll ;
   \term OclSetOfOclAny setSV ;
   \term OclBagOfOclAny bagSV ;
   \term OclSequenceOfOclAny seqSV ;
   \term OclSetOfOclInvariant setInvSV ;
}

\heuristicsDecl {
   ocl_simplify;
   ocl_spec2iterate;
   ocl_iterate2spec;
}

\rules {
   ocl_invariant_distr1 {\find ($cons_inv($invariant(t1, $and(b1, 
                               $forAll($allInstances(t2), \bind c; b2))), setInvSV))
                        \replacewith($cons_inv($invariant(t1, b1),
                                                $cons_inv($invariant(t2,
   {\subst c; $self}b2),
                                                            setInvSV)))
                        \heuristics(ocl_iterate2spec)};

   ocl_invariant_distr2 {\find ($cons_inv($invariant(t1, 
                               $forAll($allInstances(t2), \bind c; b2)), setInvSV))
                        \replacewith($cons_inv($invariant(t2, {\subst c; $self}b2),
                                                setInvSV))
                        \heuristics(ocl_iterate2spec)};

   ocl_iterateSet_step {\find ($iterate($insert_set(e1,setSV), g1, \bind(x; acc) g2))	
          \varcond(\notFreeIn(x, setSV), \notFreeIn(acc, setSV), \notFreeIn(x, g1), \notFreeIn(acc, g1))
          \replacewith({\subst x; e1}({\subst acc; $iterate(setSV, g1, \bind(x; acc) g2)}g2))
          \heuristics(ocl_simplify)};

   ocl_iterateSet_empty {\find ($iterate($empty_set, g1, \bind(x; acc) g2))
                       \replacewith(g1)
                       \heuristics(ocl_simplify)};

   ocl_iterateBag_step {\find ($iterate($insert_bag(e1,bagSV), g1, \bind( x; acc) g2))
          \varcond(\notFreeIn(x, bagSV), \notFreeIn(acc, bagSV), \notFreeIn(x, g1), \notFreeIn(acc, g1))
          \replacewith({\subst x; e1}({\subst acc; $iterate(bagSV, g1, \bind( x; acc) g2)}g2))
          \heuristics(ocl_simplify)};

   ocl_iterateBag_empty {\find ($iterate($empty_bag, g1, \bind(x; acc) g2))
                       \replacewith(g1)
                       \heuristics(ocl_simplify)};

   ocl_iterateSequence_step {\find ($iterate($insert_sequence(e1,seqSV), g1, \bind( x; acc) g2))
          \varcond(\notFreeIn(x, seqSV), \notFreeIn(acc, seqSV), \notFreeIn(x, g1), \notFreeIn(acc, g1))
          \replacewith({\subst x; e1}({\subst acc; $iterate(seqSV, g1, \bind( x; acc) g2)}g2))
          \heuristics(ocl_simplify)};

   ocl_iterateSequence_empty {\find ($iterate($empty_sequence, g1, \bind( x; acc) g2))
                       \replacewith(g1)
                       \heuristics(ocl_simplify)};

   ocl_not_true {\find ($not($true)) \replacewith($false) 
                 \heuristics(ocl_simplify)};
   ocl_not_false {\find ($not($false)) \replacewith($true) 
                  \heuristics(ocl_simplify)};

   ocl_and_true1 {\find ($and(b1, $true)) \replacewith(b1) 
                  \heuristics(ocl_simplify)};
   ocl_and_true2 {\find ($and($true, b1)) \replacewith(b1)
                  \heuristics(ocl_simplify)};

   ocl_and_false1 {\find ($and(b1, $false)) \replacewith($false) 
                   \heuristics(ocl_simplify)};
   ocl_and_false2 {\find ($and($false, b1)) \replacewith($false)
                   \heuristics(ocl_simplify)};

   ocl_or_true1 {\find ($or(b1, $true)) \replacewith($true) 
                  \heuristics(ocl_simplify)};
   ocl_or_true2 {\find ($or($true, b1)) \replacewith($true)
                  \heuristics(ocl_simplify)};

   ocl_or_false1 {\find ($or(b1, $false)) \replacewith(b1) 
                   \heuristics(ocl_simplify)};
   ocl_or_false2 {\find ($or($false, b1)) \replacewith(b1)
                   \heuristics(ocl_simplify)};

   ocl_implies_1 {\find ($implies($true, $false)) \replacewith($false) 
                  \heuristics(ocl_simplify)};
   ocl_implies_2 {\find ($implies($false, b1)) \replacewith($true)
                  \heuristics(ocl_simplify)};
   ocl_implies_3 {\find ($implies(b1, $true)) \replacewith($true)
                  \heuristics(ocl_simplify)};

   ocl_forAll2iterate {\find ($forAll(coll, \bind x; b1)) 
		       \varcond(\notFreeIn(b, b1))
                       \replacewith($iterate(coll, $true, \bind( x; b) $and(b, b1)))
                       \heuristics(ocl_spec2iterate)};

   ocl_allsubtypes {\find ($allSubtypes(t1)) \replacewith(#allSubtypes(t1))
                    \heuristics(ocl_simplify)};
   ocl_if_true {\find ($if($true, g1, g2)) \replacewith(g1)
                \heuristics(ocl_simplify)};
   ocl_if_false {\find ($if($false, g1, g2)) \replacewith(g2)
                 \heuristics(ocl_simplify)};
   ocl_equals {\find ($equals(g1, g1)) \replacewith($true)
               \heuristics(ocl_simplify)};

   ocl_iterate2forAll {\find ($iterate(coll, $true, \bind( x; b) $and(b, b1)))
		       \varcond(\notFreeIn(b, b1))
                       \replacewith($forAll(coll, \bind x; b1))
                       \heuristics(ocl_iterate2spec)};
}


