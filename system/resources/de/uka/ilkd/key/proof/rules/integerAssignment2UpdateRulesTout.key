// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2007 Universitaet Karlsruhe Germany
//                           Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//


/**
  READ FIRST BEFORE EDITING:
    This file contains all rules moving an integer related assignment
  from the inside of a throughout modality to the logic (as an update). 
  The Java operators are therefore mapped to their generic logic
  function. These generic functions (java...) are later interpreted as
  mathematical function dependent on the chosen Java semantics.

  In case of changes PLEASE preserve the files intended meaning. If
  you want to test some rules before implementing them completely,
  please create a new file and include it into the standardRules.key

  Files:
     // rules treating Java programs

     integerAssignment2UpdateRules.key: all integer related assignment
                                        rules for normal assignments      
     integerAssignment2UpdateRulesTout.key: all integer related assignment
                                        rules for throughout assignments      
     integerAssignment2UpdateRulesTraOnly.key: all integer related assignment
                                        rules for traonly assignments

     integerCommonRules.key: integer semantics independent rules which 
         transform programs

     // rules treating integer semantics sensitive functions 

     intRules.key: rules interpreting the generic translation
        functions 'java...' faithfully according to the Java Language
        Specification (sound, but a lot of divisions and modulo
        computation need to be performed)

     intRulesIgnoringOverflow.key: rules interpreting the generic translation
        functions 'java...' without overflow (not sound)  

     intRulesArith.key: rules interpreting the generic translation
        functions 'java...' as in intRulesIgnoringOverflow.key, but 
        requires to show absence of overflow or that the property to
        be proven does not depend on the value of an expression where
        an overflow occured (sound, but incomplete)
   
     // rules treating integer semantics insensitive functions 

     integerSimplificationRules.key: rules for arithmetic functions
         that do not depend on the chose integer semantics
        
*/

\schemaVariables {
  \program SimpleExpression #se, #se0, #se1 ;
  \program JavaByteExpression #seByte, #seByte0, #seByte1 ;
  \program JavaShortExpression #seShort, #seShort0, #seShort1 ;
  \program JavaIntExpression #seInt, #seInt0, #seInt1 ;
  \program JavaLongExpression #seLong, #seLong0, #seLong1 ;
  \program JavaCharByteShortIntExpression #seCharByteShortInt, 
      #seCharByteShortInt0, #seCharByteShortInt1; 
  \program JavaByteShortExpression #seByteShort;

  \program Variable #loc ;

  \formula post;
}

\rules(programRules:Java, throughout:toutOn) {

//------------------------------------------------------------------------
// ----------- Rules for binary arithmetic operators 
//------------------------------------------------------------------------

  //------------- multiplication

  assignmentMultiplicationIntTout  { 
      \find(\modality{throughout}{.. 
                 #loc = #seCharByteShortInt0 * #seCharByteShortInt1; 
            ...}\endmodality(post)) 
      \replacewith(post & (post -> 
          {#loc:=javaMulInt(#seCharByteShortInt0,#seCharByteShortInt1)}
                \modality{throughout}{.. ...}\endmodality(post))) 
      \heuristics(executeIntegerAssignment)
      \displayname "multiplication"
  };

  assignmentMultiplicationLongTout  { 
      \find(\modality{throughout}{.. 
                 #loc=#seCharByteShortInt * #seLong; 
             ...}\endmodality(post)) 
      \replacewith(post & (post ->
          {#loc:=javaMulLong(#seCharByteShortInt,#seLong)}
               \modality{throughout}{.. ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "multiplication"
  };

  assignmentMultiplicationLongTout2  { 
      \find(\modality{throughout}{.. 
       	         #loc=#seLong * #seCharByteShortInt; 
             ...}\endmodality(post)) 
      \replacewith(post & (post ->
           {#loc:=javaMulLong(#seLong,#seCharByteShortInt)}
 	         \modality{throughout}{.. ...}\endmodality(post))) 
      \heuristics(executeIntegerAssignment)
      \displayname "multiplication"
  };

  assignmentMultiplicationLongTout3 { 
      \find(\modality{throughout}{.. 
                #loc=#seLong0 * #seLong1; 
            ...}\endmodality(post)) 
      \replacewith(post & (post ->
           {#loc:=javaMulLong(#seLong0,#seLong1)}
                 \modality{throughout}{.. ...}\endmodality(post))) 
      \heuristics(executeIntegerAssignment)
      \displayname "multiplication"
  };

 
  //------------- division

  assignmentDivisionIntTout { 
      \find(\modality{throughout}{.. 
                #loc=#seCharByteShortInt0 / #seCharByteShortInt1; 
            ...}\endmodality(post)) 
      \replacewith((#seCharByteShortInt1!=0 -> 
            (post & (post -> 
               {#loc:=javaDivInt(#seCharByteShortInt0, #seCharByteShortInt1)}
                  \modality{throughout}{.. ...}\endmodality(post))))
            &
            (#seCharByteShortInt1=0 -> 
	         \modality{throughout}{.. 
	 	      throw new java.lang.ArithmeticException(); 
                  ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };

  assignmentDivisionLongTout { 
      \find(\modality{throughout}{.. 
                #loc=#se / #seLong; 
            ...}\endmodality(post)) 
      \replacewith(
          (#seLong!=0 -> 
             (post & (post ->
                  {#loc:=javaDivLong(#se, #seLong)}
                      \modality{throughout}{.. ...}\endmodality(post))))  &
          (#seLong=0 -> \modality{throughout}{.. 
                            throw new java.lang.ArithmeticException(); 
                        ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };

  //reviewed 04/19/2004, St.S.
  assignmentDivisionLongTout2  { 
      \find(\modality{throughout}{.. 
                 #loc=#seLong / #seCharByteShortInt; 
            ...}\endmodality(post)) 
      \replacewith(
           (#seCharByteShortInt!=0 -> 
                 ((post & (post ->
                     {#loc:=javaDivLong(#seLong, #seCharByteShortInt)}
                          \modality{throughout}{.. ...}\endmodality(post))))) 
          &
            (#seCharByteShortInt=0 -> \modality{throughout}{.. 
                           throw new java.lang.ArithmeticException(); 
            ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };

    
  //------------- modulo
  // a modulo operation cannot cause overflow since the magnitude of the result is always
  // less than the magnitude of the divisor (according to Java Lang Spec)

  assignmentModuloTout {
      \find(\modality{throughout}{..
                #loc=#se0 % #se1; 
            ...}\endmodality(post)) 
     \replacewith (
         (#se1!=0 -> 
            (post & (post -> 
                {#loc:=javaMod(#se0, #se1)}
                    \modality{throughout}{.. ...}\endmodality(post)))) 
         &
         (#se1=0 -> 
                 \modality{throughout}{.. 
                     throw new java.lang.ArithmeticException(); 
                 ...}\endmodality(post)))
        \heuristics(executeIntegerAssignment)
        \displayname "modulo"
  };


  //------------- subtraction

  assignmentSubstractionIntTout { 
      \find (\modality{throughout}{.. 
                 #loc = #seCharByteShortInt0 - #seCharByteShortInt1; 
             ...}\endmodality(post)) 
      \replacewith ((post & (post ->
          {#loc:=javaSubInt(#seCharByteShortInt0,#seCharByteShortInt1)}
                \modality{throughout}{.. ...}\endmodality(post))))
      \heuristics(executeIntegerAssignment)
      \displayname "subtraction"
  };

  assignmentSubstractionLongTout { 
     \find (\modality{throughout}{.. 
                #loc=#seCharByteShortInt - #seLong; 
            ...}\endmodality(post)) 
     \replacewith(post & (post -> 
           {#loc:=javaSubLong(#seCharByteShortInt,#seLong)}
                 \modality{throughout}{.. ...}\endmodality(post)))
     \heuristics(executeIntegerAssignment)
     \displayname "subtraction"
  };

  assignmentSubtractionLongTout2  { 
     \find (\modality{throughout}{.. 
                #loc=#seLong - #seCharByteShortInt; 
            ...}\endmodality(post)) 
     \replacewith(
           post & (post -> 
              {#loc:=javaSubLong(#seLong,#seCharByteShortInt)}
                    \modality{throughout}{.. ...}\endmodality(post)))
     \heuristics(executeIntegerAssignment)
     \displayname "subtraction"
  };

  assignmentSubtractionLongTout3  { 
      \find (\modality{throughout}{.. 
                  #loc=#seLong0 - #seLong1; 
             ...}\endmodality(post)) 
      \replacewith (post & (post -> 
           {#loc:=javaSubLong(#seLong0, #seLong1)}
               \modality{throughout}{.. ...}\endmodality(post))) 
      \heuristics(executeIntegerAssignment)
      \displayname "subtraction"
  };

  //------------- addition

  assignmentAdditionIntTout  { 
      \find(\modality{throughout}{.. 
                #loc=#seCharByteShortInt0 + #seCharByteShortInt1; 
            ...}\endmodality(post)) 
     \replacewith(
         post & (post -> 
            {#loc:=javaAddInt(#seCharByteShortInt0,#seCharByteShortInt1)}
                 \modality{throughout}{.. ...}\endmodality(post)))
     \heuristics(executeIntegerAssignment)
     \displayname "addition"
  };

 assignmentAdditionLongTout  { 
     \find(\modality{throughout}{.. 
               #loc=#seCharByteShortInt + #seLong; 
           ...}\endmodality(post)) 
     \replacewith(post & (post ->
           {#loc:=javaAddLong(#seCharByteShortInt,#seLong)}
                \modality{throughout}{.. ...}\endmodality(post)))
     \heuristics(executeIntegerAssignment)
     \displayname "addition"};

 assignmentAdditionLongTout2  { 
     \find(\modality{throughout}{.. 
               #loc=#seLong + #seCharByteShortInt; 
           ...}\endmodality(post)) 
     \replacewith(post & (post -> 
           {#loc:=javaAddLong(#seLong,#seCharByteShortInt)}
                  \modality{throughout}{.. ...}\endmodality(post)))
     \heuristics(executeIntegerAssignment)
     \displayname "addition"};

 assignmentAdditionLongTout3  { 
        \find(\modality{throughout}{.. 
                 #loc=#seLong0 + #seLong1; 
              ...}\endmodality(post)) 
        \replacewith(post & (post ->
             {#loc:=javaAddLong(#seLong0,#seLong1)}
                 \modality{throughout}{.. ...}\endmodality(post)))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
  };

  //------------- binary "and"

  assignmentBitwiseAndIntTout  { 
         \find(\modality{throughout}{.. 
                  #loc=#seCharByteShortInt0 & #seCharByteShortInt1; 
               ...}\endmodality(post)) 
         \replacewith(post & (post ->
             {#loc:=javaBitwiseAndInt(#seCharByteShortInt0,#seCharByteShortInt1)}
                 \modality{throughout}{.. ...}\endmodality(post)))
         \heuristics(executeIntegerAssignment)
         \displayname "bitwiseAnd"
  };

  assignmentBitwiseAndLongTout  { 
        \find (\modality{throughout}{.. #loc=#seCharByteShortInt & #seLong; ...}\endmodality(post)) 
        \replacewith(post & (post ->
                {#loc:=javaBitwiseAndLong(#seCharByteShortInt,#seLong)}
                          \modality{throughout}{.. ...}\endmodality(post)))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseAnd"
  };

  assignmentBitwiseAndLongTout2  { 
        \find (\modality{throughout}{.. 
                  #loc=#seLong & #seCharByteShortInt; 
               ...}\endmodality(post)) 
        \replacewith(post & (post ->
             {#loc:=javaBitwiseAndLong(#seLong,#seCharByteShortInt)}
                     \modality{throughout}{.. ...}\endmodality(post)))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseAnd"
  };

  assignmentBitwiseAndLongTout3  { 
      \find (\modality{throughout}{.. #loc=#seLong0 & #seLong1; ...}\endmodality(post)) 
      \replacewith(post & (post ->
          {#loc:=javaBitwiseAndLong(#seLong0,#seLong1)}
              \modality{throughout}{.. ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "bitwiseAnd"
  };

  //------------- binary "or"

  assignmentBitwiseOrIntTout  { 
       \find(\modality{throughout}{..  
                  #loc=#seCharByteShortInt0 | #seCharByteShortInt1; 
              ...}\endmodality(post)) 
       \replacewith(post & (post -> 
            {#loc:=javaBitwiseOrInt(#seCharByteShortInt0,#seCharByteShortInt1)}
                \modality{throughout}{.. ...}\endmodality(post)))
       \heuristics(executeIntegerAssignment)
       \displayname "bitwiseOr"
  };

  assignmentBitwiseOrLongTout  { 
      \find (\modality{throughout}{.. #loc=#seCharByteShortInt | #seLong; ...}\endmodality(post)) 
      \replacewith(post & (post ->
           {#loc:=javaBitwiseOrLong(#seCharByteShortInt,#seLong)}
               \modality{throughout}{.. ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "bitwiseOr"
  };

  assignmentBitwiseOrLongTout2  { 
        \find (\modality{throughout}{.. 
                   #loc=#seLong | #seCharByteShortInt; 
               ...}\endmodality(post)) 
        \replacewith(post & (post ->
            {#loc:=javaBitwiseOrLong(#seLong,#seCharByteShortInt)}
                \modality{throughout}{.. ...}\endmodality(post)))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseOr"
  };

  assignmentBitwiseOrLongTout3  { 
        \find (\modality{throughout}{.. #loc=#seLong0 | #seLong1; ...}\endmodality(post)) 
        \replacewith (post & (post ->
             {#loc:=javaBitwiseOrLong(#seLong0,#seLong1)}
                    \modality{throughout}{.. ...}\endmodality(post)))
        \heuristics(executeIntegerAssignment)
        \displayname "binary_OR"
  };

  //------------- binary "xor"

  assignmentBitwiseXOrIntTout { 
      \find (\modality{throughout}{.. 
                  #loc=#seCharByteShortInt0 ^ #seCharByteShortInt1; 
             ...}\endmodality(post)) 
       \replacewith(post & (post ->
              {#loc:=javaBitwiseXOrInt(#seCharByteShortInt0,#seCharByteShortInt1)}
                   \modality{throughout}{.. ...}\endmodality(post)))
       \heuristics(executeIntegerAssignment)
       \displayname "bitwiseXOr"
  };

  assignmentBitwiseXOrLongTout  { 
     \find (\modality{throughout}{.. 
                #loc=#seCharByteShortInt ^ #seLong; 
            ...}\endmodality(post)) 
     \replacewith(post & (post ->
          {#loc:=javaBitwiseXOrLong(#seCharByteShortInt,#seLong)}
                \modality{throughout}{.. ...}\endmodality(post)))
     \heuristics(executeIntegerAssignment)
     \displayname "bitwiseXOr"
  };

  assignmentBitwiseXOrLongTout2  { 
      \find (\modality{throughout}{.. 
                 #loc=#seLong ^ #seCharByteShortInt; 
             ...}\endmodality(post)) 
      \replacewith(post & (post ->
           {#loc:=javaBitwiseXOrLong(#seLong,#seCharByteShortInt)}
                   \modality{throughout}{.. ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "bitwiseXOr"
  };

  assignmentBitwiseXOrLongTout3  { 
      \find (\modality{throughout}{.. 
                 #loc=#seLong0 ^ #seLong1; 
             ...}\endmodality(post)) 
      \replacewith (post & (post ->
          {#loc:=javaBitwiseXOrLong(#seLong0,#seLong1)}
               \modality{throughout}{.. ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "bitwiseXOr"
  };

  //------------- binary shift-right

  assignmentShiftRightIntTout { 
      \find (\modality{throughout}{.. 
                 #loc=#seCharByteShortInt0 >> #se; 
             ...}\endmodality(post)) 
      \replacewith (post & (post ->
           {#loc:=javaShiftRightInt(#seCharByteShortInt0,#se)}
                 \modality{throughout}{.. ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "shift"
  };

  assignmentShiftRightLongTout { 
     \find (\modality{throughout}{.. 
                #loc=#seLong0 >> #se; 
            ...}\endmodality(post)) 
     \replacewith (post & (post ->
          {#loc:=javaShiftRightLong(#seLong0,#se)}
               \modality{throughout}{.. ...}\endmodality(post)))
     \heuristics(executeIntegerAssignment)
     \displayname "shift"
  };

  //------------- binary shift-left

  assignmentShiftLeftIntTout  { 
      \find (\modality{throughout}{.. 
                 #loc=#seCharByteShortInt0 << #se; 
              ...}\endmodality(post)) 
      \replacewith (post & (post ->
           {#loc:=javaShiftLeftInt(#seCharByteShortInt0,#se)}
               \modality{throughout}{.. ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "shift"
  };

  assignmentShiftLeftLongTout  { 
      \find(\modality{throughout}{.. 
                 #loc=#seLong0 << #se; 
            ...}\endmodality(post)) 
      \replacewith(post & (post ->
           {#loc:=javaShiftLeftLong(#seLong0,#se)}
               \modality{throughout}{.. ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "shift"
  };

  //------------- binary unsigned-shift-right

  assignmentUnsignedShiftRightIntTout  { 
      \find (\modality{throughout}{.. 
                 #loc=#seCharByteShortInt0 >>> #se; ...}
             \endmodality(post)) 
      \replacewith ({#loc:=javaUnsignedShiftRightInt(#seCharByteShortInt0,#se)}
                          \modality{throughout}{.. ...}\endmodality(post)) 
      \heuristics(executeIntegerAssignment)
      \displayname "shift"
  };

  assignmentUnsignedShiftRightLongTout  { 
      \find (\modality{throughout}{.. 
                 #loc=#seLong0 >>> #se; 
             ...}\endmodality(post)) 
     \replacewith (post & (post ->
          {#loc:=javaUnsignedShiftRightLong(#seLong0,#se)}
              \modality{throughout}{.. ...}\endmodality(post)))
     \heuristics(executeIntegerAssignment)
     \displayname "shift"
  };


//------------------------------------------------------------------------
// ----------- Rules for unary plus, minus, and negation
//------------------------------------------------------------------------

  unaryMinusIntTout { 
     \find (\modality{throughout}{.. 
                #loc = - #seCharByteShortInt; 
            ...}\endmodality(post)) 
     \replacewith(post & (post ->
          {#loc:=javaUnaryMinusInt(#seCharByteShortInt)}
               \modality{throughout}{..  ...}\endmodality(post)))
     \heuristics (executeIntegerAssignment)
     \displayname "unaryMinus"
  };

  unaryMinusLongTout { 
      \find (\modality{throughout}{.. 
                 #loc = - #seLong; 
             ...}\endmodality(post)) 
      \replacewith(post & (post ->
           {#loc:=javaUnaryMinusLong(#seLong)}
               \modality{throughout}{..  ...}\endmodality(post)))
      \heuristics (executeIntegerAssignment)
      \displayname "unaryMinus"
  };
    
  bitwiseNegationTout { 
      \find (\modality{throughout}{.. #loc = ~ #se; ...}\endmodality(post)) 
      \replacewith(post & (post ->
          {#loc:=javaBitwiseNegation(#se)}
                \modality{throughout}{..  ...}\endmodality(post)))
      \heuristics (executeIntegerAssignment)
      \displayname "invertBits"
  };


//------------------------------------------------------------------------
// ------------- Rules for Java types narrowing casts
//------------------------------------------------------------------------

  narrowingByteCastShortTout { 
     \find(\modality{throughout}{..
               #loc = (byte) #seShort; 
           ...}\endmodality(post))
     \replacewith (post & (post -> 
          {#loc := javaCastByte(#seShort)}
               \modality{throughout}{..  ...}\endmodality(post)))
     \heuristics (executeIntegerAssignment)
     \displayname "cast" 
  };

  narrowingByteCastIntTout { 
      \find (\modality{throughout}{.. 
                 #loc = (byte) #seInt; 
             ...}\endmodality(post))
      \replacewith (post & (post -> 
          {#loc := javaCastByte(#seInt)}
              \modality{throughout}{..  ...}\endmodality(post)))
      \heuristics (executeIntegerAssignment)
      \displayname "cast" 
  };

  narrowingByteCastLongTout { 
       \find (\modality{throughout}{.. 
                  #loc = (byte) #seLong; 
              ...}\endmodality(post))
       \replacewith (post & (post -> 
             {#loc := javaCastByte(#seLong)}
                  \modality{throughout}{..  ...}\endmodality(post)))
       \heuristics (executeIntegerAssignment)
       \displayname "cast" 
  };

  narrowingShortCastIntTout { 
       \find (\modality{throughout}{.. 
                  #loc = (short) #seInt; 
              ...}\endmodality(post))
       \replacewith (post & (post -> 
            {#loc := javaCastShort(#seInt)}
                  \modality{throughout}{..  ...}\endmodality(post)))
       \heuristics (executeIntegerAssignment)
       \displayname "cast" 
  };

  narrowingShortCastLongTout { 
      \find (\modality{throughout}{.. 
                 #loc = (short) #seLong; 
             ...}\endmodality(post))
      \replacewith (post & (post -> 
          {#loc := javaCastShort(#seLong)}
                \modality{throughout}{..  ...}\endmodality(post)))
      \heuristics (executeIntegerAssignment)
      \displayname "cast" 
  };

  narrowingIntCastLongTout { 
       \find (\modality{throughout}{.. 
                  #loc = (int) #seLong; 
              ...}\endmodality(post))
       \replacewith (post & (post -> 
            {#loc := javaCastInt(#seLong)}
                 \modality{throughout}{..  ...}\endmodality(post)))
       \heuristics (executeIntegerAssignment)
       \displayname "cast" 
  };

  narrowingCharCastByteTout { 
    \find (\modality{throughout}{.. 
               #loc = (char) #seByte; 
           ...}\endmodality(post))
    \replacewith (post & (post ->
         {#loc := javaCastChar(#seByte)}
              \modality{throughout}{..  ...}\endmodality(post)))
    \heuristics (executeIntegerAssignment)
    \displayname "cast" 
  };

  narrowingCharCastShortTout { 
     \find (\modality{throughout}{.. 
                #loc = (char) #seShort; 
            ...}\endmodality(post))
     \replacewith (post & (post -> 
         {#loc := javaCastChar(#seShort)}
              \modality{throughout}{..  ...}\endmodality(post)))
     \heuristics (executeIntegerAssignment)
     \displayname "cast" 
  };

  narrowingCharCastIntTout { 
     \find (\modality{throughout}{.. #loc = (char) #seInt; ...}\endmodality(post))
     \replacewith (post & (post ->
          {#loc := javaCastChar(#seInt)}
              \modality{throughout}{..  ...}\endmodality(post)))
     \heuristics (executeIntegerAssignment)
     \displayname "cast" 
  };

  narrowingCastLongTout { 
      \find (\modality{throughout}{.. 
                 #loc = (char) #seLong; 
             ...}\endmodality(post))
      \replacewith (post & (post ->
           {#loc := javaCastChar(#seLong)}
                \modality{throughout}{..  ...}\endmodality(post)))
      \heuristics (executeIntegerAssignment)
      \displayname "cast" 
  };
}
