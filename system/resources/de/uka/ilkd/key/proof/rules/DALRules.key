// This file is part of KeYmaera
// Copyright (C) 2007 Andre Platzer
//	-> Modified by Nikos Arechiga on 6/10/2014 to include a barrier certificate rule
//
// The KeYmaera system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules for handling hybrid programs

\include ruleSetsDeclarations;

\functions{
	\external R Exp( R );
	\external R D(R, R);
}


\schemaVariables {
  \formula post, inv, augment;

  \term R f, g;
  \variables R ep;
  \program NormalizedOrdinaryDiffSystem #normalizedODE;
  \program OrdinaryDiffSystem #ordinarydiffsystem;
  \program OrdinaryAndNotNormalizedDiffSystem #ordinaryandnotnormalizeddiffsystem;
  //@TODO this should be QuantifiedSimpleOrdinaryDiffSystem and NormalizedOrdinaryDiffSystem
  \program QuantifiedSimpleOrdinaryDiffSystem #qsimpleode;
  \program DiffSystem #diffsystem,#newsys;
  \program DiffSystemWithIneq #diffsystemWithIneq;
  
  // for barrier certificates
  \term R postleft, postright;
  // for ExponentialBoundCut
  \program Variable #alpha, #timer;
  \program DLVariable #s, #ss, #sss, #ssss;
  \program DLExpression #rhs1, #rhs2, #rhs3, #rhs4;
  \term R #level;
  \term R #lyapunovFunction;

  \program DLFormula #DOE1, #DOE2;
  
  

  // for finvcut
  \formula #postcondition;
  \formula #safety;
  \program DLFormula #finvariant;
  \program DLProgram #dlprogram;
}

\rules {
////////////////////////////////////////
//
// program rules
//
 
 normalize_ode_box_right { \find (==> \[#ordinaryandnotnormalizeddiffsystem\]post)
          \replacewith (==> #DiffNormalize(\[#ordinaryandnotnormalizeddiffsystem\]post) )
          \heuristics(diff_rule)
		  \onlyRigidFunctions
          \displayname "Normalize ODE"
 };

 normalize_ode_box_left { \find (\[#ordinaryandnotnormalizeddiffsystem\]post ==>)
          \replacewith (#DiffNormalize(\[#ordinaryandnotnormalizeddiffsystem\]post) ==> )
          \heuristics(diff_rule)
		  \onlyRigidFunctions
          \displayname "Normalize ODE"
 };

 normalize_ode_dia_right { \find (==> \<#ordinaryandnotnormalizeddiffsystem\>post)
          \replacewith (==> #DiffNormalize(\<#ordinaryandnotnormalizeddiffsystem\>post) )
          \heuristics(diff_rule)
		  \onlyRigidFunctions
          \displayname "Normalize ODE"
 };

 normalize_ode_dia_left { \find (\<#ordinaryandnotnormalizeddiffsystem\>post ==>)
          \replacewith (#DiffNormalize(\<#ordinaryandnotnormalizeddiffsystem\>post) ==> )
          \heuristics(diff_rule)
		  \onlyRigidFunctions
          \displayname "Normalize ODE"
 };
 
 diffind { \find (==> \[#normalizedODE\]post)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\]post) ==> post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, #DiffInd(\[#normalizedODE\]post), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "DI differential invariant"
 }; 

 barriercert_lt { \find (==> \[#normalizedODE\] postleft < postright)
      //\varcond(\isFirstOrderFormula(postleft < postright))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\](postleft < postright)) ==> (postleft < postright) );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, (postleft = postright) -> #BarrierDiffInd(\[#normalizedODE\] (postleft < postright)), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "BC Barrier Certificate (lt)"
 }; 

 barriercert_leq { \find (==> \[#normalizedODE\] postleft <= postright)
      //\varcond(\isFirstOrderFormula(postleft < postright))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\](postleft <= postright)) ==> (postleft <= postright) );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, (postleft = postright) -> #BarrierDiffInd(\[#normalizedODE\] (postleft < postright)), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "BC Barrier Certificate (leq)"
 }; 

 barriercert_gt { \find (==> \[#normalizedODE\] postleft > postright)
      //\varcond(\isFirstOrderFormula(postleft > postright))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\](postleft > postright)) ==> (postleft > postright) );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, (postleft = postright) -> #BarrierDiffInd(\[#normalizedODE\] postleft > postright), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "BC Barrier Certificate (geq)"
 }; 

 barriercert_geq { \find (==> \[#normalizedODE\] postleft >= postright)
      //\varcond(\isFirstOrderFormula(postleft > postright))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\](postleft >= postright)) ==> (postleft >= postright) );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, (postleft = postright) -> #BarrierDiffInd(\[#normalizedODE\] postleft > postright), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "BC Barrier Certificate (gt)"
 }; 

  //ExponentialBoundCut { \find (==> \[ {#s' = #rhs1} \] postleft >= postright)
  //     //\varcond(\isFirstOrderFormula(postleft > postright))
  //   "Invariant Initially Valid":
  //         \replacewith (#invariantPart(\[#normalizedODE\](postleft >= postright)) ==> (postleft >= postright) );
  //   "ODE Preserves Invariant":
  //         \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, (postleft = postright) -> #BarrierDiffInd(\[#normalizedODE\] postleft > postright), false))
  //         \heuristics(invariant_diff,diff_rule)
  //      	  \onlyRigidFunctions
  //         \displayname "BC Barrier Certificate (EBC)"
  //}; 

 ExponentialBoundCut { \find(==> \[ {#s' = #rhs1,  #ss' = #rhs2,  #sss' = #rhs3, #timer' = 1,  #ssss' = #rhs4, #DOE1, #DOE2} \] #lyapunovFunction <= #level*Exp(#alpha*#timer))
      "Initial Bound Holds":
            \replacewith (==> #lyapunovFunction <= #level);
      "Derivative Bound Holds":
            \replacewith (==>  #dlUniversalClosure(\[ {#s' = #rhs1,  #ss' = #rhs2,  #sss' = #rhs3, #timer' = 1,  #ssss' = #rhs4 & #DOE1 & #DOE2} \]true, ((#lyapunovFunction = 0) & ( D(#lyapunovFunction,#s)*#rhs1 + D(#lyapunovFunction,#ss)*#rhs2 + D(#lyapunovFunction,#sss)*#rhs3 + D(#lyapunovFunction,#ssss)*#rhs4) = 0 ) | (( D(#lyapunovFunction,#s)*#rhs1 + D(#lyapunovFunction,#ss)*#rhs2 + D(#lyapunovFunction,#sss)*#rhs3 + D(#lyapunovFunction,#ssss)*#rhs4) < #alpha* #lyapunovFunction) , false))
      	    \displayname "Exponential Bound Cut (EBC)"
            
   };


  diffindmodnonsmooth { \find (==> \[#normalizedODE\]post)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\]post) ==> post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, #DiffIndModNonSmooth(\[#normalizedODE\]post), false))
          /*\heuristics(invariant_diff,diff_rule) */
        \onlyRigidFunctions
          \displayname "Non-smooth barrier certificate"
 }; 
 

 diffindmod_left { \find (\<#normalizedODE\>post ==>)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\]!post) ==> !post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, #DiffIndMod(\[#normalizedODE\]!post), false))
          /*\heuristics(invariant_diff,diff_rule) */
        \onlyRigidFunctions
          \displayname "DI differential invariant"
 }; 
 
 diffind_left { \find (\<#normalizedODE\>post ==>)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\]!post) ==> !post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, #DiffInd(\[#normalizedODE\]!post), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "DI differential invariant"
 }; 

 Qdiffind { \find (==> \[#qsimpleode\]post)
      //@TODO \varcond(\isFirstOrderFormula(post)) allowing quantifiers though
      //@TODO the #DiffInd operator does not accept quantified differential equations yet.
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#qsimpleode\]post) ==> post );
    "ODE Preserves Invariant":
          \addfreshgoal (==>  #DiffInd(\[#qsimpleode\]post))
          \displayname "QDI quantified differential invariant"
 }; 

 difffin { \find (==> \<#normalizedODE\>post)
      \varcond(\isFirstOrderFormula(post), \notFreeIn(ep, post))
    "Invariant Sustained":
          \replacewith (==>  #weaknegateinv(\<#normalizedODE\>post));
    "Variant Progress":
          \replacewith (==>  \exists ep; (ep>0 & #dlUniversalClosure(\[#normalizedODE\]true, !post -> #DiffFin(\<#normalizedODE\>post, ep), false)))
          ///\replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, !post -> #DiffFin(\<#normalizedODE\>post, 1), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "DV differential variant"
 }; 

 difffin_left { \find (\[#normalizedODE\]post ==>)
      \varcond(\isFirstOrderFormula(post), \notFreeIn(ep, post))
    "Invariant Sustained":
                    \replacewith (==>  #weaknegateinv(\<#normalizedODE\>!post));
    "Variant Progress":
          \replacewith (==>  \exists ep; (ep>0 & #dlUniversalClosure(\[#normalizedODE\]true, !post -> #DiffFin(\<#normalizedODE\>post, ep), false)))
          /// \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, post -> #DiffFin(\<#normalizedODE\>!post, 1), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "DV differential variant"
 }; 

 dri { \assumes(f = g ==>) 
	 \find (==> \[#normalizedODE\]f = g)
	  \replacewith (==> #DRI(\[#normalizedODE\]f = g, "DRI"))
	  \onlyRigidFunctions
	  \displayname "DRI differential radical invariant"
 }; 

 sflie { \assumes(f = g ==>) 
	 \find (==> \[#normalizedODE\]f = g)
	  \replacewith (==> #DRI(\[#normalizedODE\]f = g, "SFLie"))
	  \onlyRigidFunctions
	  \displayname "SF Lie"
 }; 

 sfliezero { \assumes(f = g ==>) 
	 \find (==> \[#normalizedODE\]f = g)
	  \replacewith (==> #DRI(\[#normalizedODE\]f = g, "SFLieZero"))
	  \onlyRigidFunctions
	  \displayname "SF Lie Zero"
 }; 

	  a{ \assumes(f = g ==>) 
	 \find (==> \[#normalizedODE\]f = g)
	  \replacewith (==> #DRI(\[#normalizedODE\]f = g, "SFLieStar"))
	  \onlyRigidFunctions
	  \displayname "SF Lie*"
 }; 
 diffweaken { \find (==> \[#ordinarydiffsystem\]post)
          \replacewith (==>  #dlUniversalClosure(\[#ordinarydiffsystem\]true, #invariantPart(\[#ordinarydiffsystem\]post) -> post, false))
          \displayname "[DR'] differential weakening"
		  \onlyRigidFunctions
          \heuristics(invariant_weaken,diff_rule) 
 }; 

 qdiffweaken { \find (==> \[#qsimpleode\]post)
          \addfreshgoal (==>  #invariantPart(\[#qsimpleode\]post) -> post)
          \displayname "[QDR'] differential weakening"
          \heuristics(invariant_weaken,diff_rule) 
 }; 

  //@todo should rename internally to diffcut with \oldname(diffstrenghten)
 diffstrengthen { \find (==> \[#ordinarydiffsystem\]post)
      \varcond(\isFirstOrderFormula(augment))
    "Invariant Valid":
          \replacewith (==> \[#ordinarydiffsystem\] augment );
    "Augmented Invariant":
          \replacewith (==>  #diffAdjoin(\[#ordinarydiffsystem\]post,augment))
          \heuristics(invariant_strengthen,diff_rule)
          \displayname "[DC] differential cut"
 }; 

 Qdiffcut { \find (==> \[#qsimpleode\]post)
      \varcond(\isFirstOrderFormula(augment))
    "Invariant Valid":
          \replacewith (==> \[#qsimpleode\] augment );
    "Augmented Invariant":
          \replacewith (==>  #diffAdjoin(\[#qsimpleode\]post,augment))
          \heuristics(invariant_strengthen,diff_rule)
          \displayname "[QDC] quantified differential cut"
 }; 
 
 diffreplace_box_right { \find (==> \[#diffsystem\]post )
 	"System entailment":
 		\replacewith(==> #dlUniversalClosure(\[#diffsystem\]true, #dlimplies(\[#diffsystem\]true,\[#newsys\]true), false));
	"Generalisation":
		\replacewith(==> \[#newsys\] post)
		  \onlyRigidFunctions
		\displayname "[DR] differential refine"
};
 
 diffreplace_box_left { \find (\[#diffsystem\]post ==>)
 	"System entailment":
 		\replacewith(==> #dlUniversalClosure(\[#diffsystem\]true, #dlimplies(\[#newsys\]true,\[#diffsystem\]true), false));
	"Generalisation":
		\replacewith(\[#newsys\] post ==>)
		\heuristics(diff_ineq_weaken,diff_rule)
		  \onlyRigidFunctions
		\displayname "[DR] differential refine" 	
};

 diffreplace_dia_right { \find (==> \<#diffsystem\>post )
 	"System entailment":
 		\replacewith(==> #dlUniversalClosure(\[#diffsystem\]true, #dlimplies(\[#newsys\]true,\[#diffsystem\]true), false));
	"Generalisation":
		\replacewith(==>\<#newsys\> post)
		\heuristics(diff_ineq_weaken,diff_rule)
		  \onlyRigidFunctions
		\displayname "<DR> differential refine" 	
};
 
 diffreplace_dia_left { \find (\<#diffsystem\>post ==>)
 	"System entailment":
 		\replacewith(==> #dlUniversalClosure(\[#diffsystem\]true, #dlimplies(\[#diffsystem\]true,\[#newsys\]true), false));
	"Generalisation":
		\replacewith(\<#newsys\> post ==>)
		  \onlyRigidFunctions
		\displayname "<DR> differential refine" 	
};

// "forward invariant cut"

FInvCutStar {
	\find( ==> \[ #dlprogram* \] #safety )
	       "Invariant holds":
	                \replacewith( ==> #dlUniversalClosure( \[#dlprogram\]true, #finvariant -> \[#dlprogram\] (#finvariant), false) );
	        "Invariant implies safety":
	                \replacewith( ==> #dlUniversalClosure(\[#dlprogram\]true, #finvariant -> #safety, false ));
	        "Remaining states are safe":
	                \replacewith( !#finvariant ==> \[ (#dlprogram; ?(! (#finvariant)))* \] #safety )
        \displayname "FInv Cut Star"
};

FInvCut {
	\find( ==> \[ #dlprogram \] #safety )
	       "Invariant holds":
	                \replacewith( ==> #dlUniversalClosure( \[#dlprogram\]true, #finvariant -> \[#dlprogram\] (#finvariant), false) );
	        "Invariant implies safety":
	                \replacewith( ==> #dlUniversalClosure(\[#dlprogram\]true, #finvariant -> #safety, false ));
	        "Remaining states are safe":
	                \replacewith( !#finvariant ==> \[ (#dlprogram; ?(! (#finvariant))) \] #safety )
        \displayname "FInv Cut"
};

FInvLemma {
	\find( ==> \[ #normalizedODE; ?#finvariant \]post )
	\replacewith(==>  \[ #normalizedODE; \] (#finvariant -> post ))
	\displayname "FInv Lemma"
};


FInvLemma2 {
	\find( ==> \[ #normalizedODE\]\[ ?#finvariant \]post )
	\replacewith(==>  \[ #normalizedODE; \] (#finvariant -> post ))
	\displayname "FInv Lemma 2"
};

}
